// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ElasticsearchClient is an autogenerated mock type for the ElasticsearchClient type
type ElasticsearchClient struct {
	mock.Mock
}

type ElasticsearchClient_Expecter struct {
	mock *mock.Mock
}

func (_m *ElasticsearchClient) EXPECT() *ElasticsearchClient_Expecter {
	return &ElasticsearchClient_Expecter{mock: &_m.Mock}
}

// EnsureIndexExistsFromFile provides a mock function with given fields: ctx, indexName, fileNameDoc
func (_m *ElasticsearchClient) EnsureIndexExistsFromFile(ctx context.Context, indexName string, fileNameDoc string) error {
	ret := _m.Called(ctx, indexName, fileNameDoc)

	if len(ret) == 0 {
		panic("no return value specified for EnsureIndexExistsFromFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, indexName, fileNameDoc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ElasticsearchClient_EnsureIndexExistsFromFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureIndexExistsFromFile'
type ElasticsearchClient_EnsureIndexExistsFromFile_Call struct {
	*mock.Call
}

// EnsureIndexExistsFromFile is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - fileNameDoc string
func (_e *ElasticsearchClient_Expecter) EnsureIndexExistsFromFile(ctx interface{}, indexName interface{}, fileNameDoc interface{}) *ElasticsearchClient_EnsureIndexExistsFromFile_Call {
	return &ElasticsearchClient_EnsureIndexExistsFromFile_Call{Call: _e.mock.On("EnsureIndexExistsFromFile", ctx, indexName, fileNameDoc)}
}

func (_c *ElasticsearchClient_EnsureIndexExistsFromFile_Call) Run(run func(ctx context.Context, indexName string, fileNameDoc string)) *ElasticsearchClient_EnsureIndexExistsFromFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ElasticsearchClient_EnsureIndexExistsFromFile_Call) Return(_a0 error) *ElasticsearchClient_EnsureIndexExistsFromFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ElasticsearchClient_EnsureIndexExistsFromFile_Call) RunAndReturn(run func(context.Context, string, string) error) *ElasticsearchClient_EnsureIndexExistsFromFile_Call {
	_c.Call.Return(run)
	return _c
}

// SearchInElasticsearch provides a mock function with given fields: ctx, index, query, dest
func (_m *ElasticsearchClient) SearchInElasticsearch(ctx context.Context, index string, query map[string]interface{}, dest interface{}) error {
	ret := _m.Called(ctx, index, query, dest)

	if len(ret) == 0 {
		panic("no return value specified for SearchInElasticsearch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}, interface{}) error); ok {
		r0 = rf(ctx, index, query, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ElasticsearchClient_SearchInElasticsearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchInElasticsearch'
type ElasticsearchClient_SearchInElasticsearch_Call struct {
	*mock.Call
}

// SearchInElasticsearch is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - query map[string]interface{}
//   - dest interface{}
func (_e *ElasticsearchClient_Expecter) SearchInElasticsearch(ctx interface{}, index interface{}, query interface{}, dest interface{}) *ElasticsearchClient_SearchInElasticsearch_Call {
	return &ElasticsearchClient_SearchInElasticsearch_Call{Call: _e.mock.On("SearchInElasticsearch", ctx, index, query, dest)}
}

func (_c *ElasticsearchClient_SearchInElasticsearch_Call) Run(run func(ctx context.Context, index string, query map[string]interface{}, dest interface{})) *ElasticsearchClient_SearchInElasticsearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]interface{}), args[3].(interface{}))
	})
	return _c
}

func (_c *ElasticsearchClient_SearchInElasticsearch_Call) Return(_a0 error) *ElasticsearchClient_SearchInElasticsearch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ElasticsearchClient_SearchInElasticsearch_Call) RunAndReturn(run func(context.Context, string, map[string]interface{}, interface{}) error) *ElasticsearchClient_SearchInElasticsearch_Call {
	_c.Call.Return(run)
	return _c
}

// StoreToElasticsearch provides a mock function with given fields: ctx, payload
func (_m *ElasticsearchClient) StoreToElasticsearch(ctx context.Context, payload interface{}) error {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for StoreToElasticsearch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ElasticsearchClient_StoreToElasticsearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreToElasticsearch'
type ElasticsearchClient_StoreToElasticsearch_Call struct {
	*mock.Call
}

// StoreToElasticsearch is a helper method to define mock.On call
//   - ctx context.Context
//   - payload interface{}
func (_e *ElasticsearchClient_Expecter) StoreToElasticsearch(ctx interface{}, payload interface{}) *ElasticsearchClient_StoreToElasticsearch_Call {
	return &ElasticsearchClient_StoreToElasticsearch_Call{Call: _e.mock.On("StoreToElasticsearch", ctx, payload)}
}

func (_c *ElasticsearchClient_StoreToElasticsearch_Call) Run(run func(ctx context.Context, payload interface{})) *ElasticsearchClient_StoreToElasticsearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *ElasticsearchClient_StoreToElasticsearch_Call) Return(_a0 error) *ElasticsearchClient_StoreToElasticsearch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ElasticsearchClient_StoreToElasticsearch_Call) RunAndReturn(run func(context.Context, interface{}) error) *ElasticsearchClient_StoreToElasticsearch_Call {
	_c.Call.Return(run)
	return _c
}

// NewElasticsearchClient creates a new instance of ElasticsearchClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewElasticsearchClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ElasticsearchClient {
	mock := &ElasticsearchClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
