// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	structs "github.com/dika22/news-service/package/structs"
)

// CacheRepository is an autogenerated mock type for the CacheRepository type
type CacheRepository struct {
	mock.Mock
}

// DeleteArticleKeys provides a mock function with given fields: ctx
func (_m *CacheRepository) DeleteArticleKeys(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteArticleKeys")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, req, dest
func (_m *CacheRepository) Get(ctx context.Context, req structs.RequestSearchArticle, dest *structs.ResponseGetArticle) error {
	ret := _m.Called(ctx, req, dest)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, structs.RequestSearchArticle, *structs.ResponseGetArticle) error); ok {
		r0 = rf(ctx, req, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Set provides a mock function with given fields: ctx, req, dest
func (_m *CacheRepository) Set(ctx context.Context, req structs.RequestSearchArticle, dest *structs.ResponseGetArticle) error {
	ret := _m.Called(ctx, req, dest)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, structs.RequestSearchArticle, *structs.ResponseGetArticle) error); ok {
		r0 = rf(ctx, req, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCacheRepository creates a new instance of CacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacheRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CacheRepository {
	mock := &CacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
