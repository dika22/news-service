// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	structs "news-service/package/structs"
)

// CacheRepository is an autogenerated mock type for the CacheRepository type
type CacheRepository struct {
	mock.Mock
}

type CacheRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CacheRepository) EXPECT() *CacheRepository_Expecter {
	return &CacheRepository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, req, dest
func (_m *CacheRepository) Get(ctx context.Context, req structs.RequestSearchArticle, dest *structs.ResponseGetArticle) error {
	ret := _m.Called(ctx, req, dest)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, structs.RequestSearchArticle, *structs.ResponseGetArticle) error); ok {
		r0 = rf(ctx, req, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type CacheRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - req structs.RequestSearchArticle
//   - dest *structs.ResponseGetArticle
func (_e *CacheRepository_Expecter) Get(ctx interface{}, req interface{}, dest interface{}) *CacheRepository_Get_Call {
	return &CacheRepository_Get_Call{Call: _e.mock.On("Get", ctx, req, dest)}
}

func (_c *CacheRepository_Get_Call) Run(run func(ctx context.Context, req structs.RequestSearchArticle, dest *structs.ResponseGetArticle)) *CacheRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(structs.RequestSearchArticle), args[2].(*structs.ResponseGetArticle))
	})
	return _c
}

func (_c *CacheRepository_Get_Call) Return(_a0 error) *CacheRepository_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheRepository_Get_Call) RunAndReturn(run func(context.Context, structs.RequestSearchArticle, *structs.ResponseGetArticle) error) *CacheRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, req, dest
func (_m *CacheRepository) Set(ctx context.Context, req structs.RequestSearchArticle, dest *structs.ResponseGetArticle) error {
	ret := _m.Called(ctx, req, dest)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, structs.RequestSearchArticle, *structs.ResponseGetArticle) error); ok {
		r0 = rf(ctx, req, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheRepository_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type CacheRepository_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - req structs.RequestSearchArticle
//   - dest *structs.ResponseGetArticle
func (_e *CacheRepository_Expecter) Set(ctx interface{}, req interface{}, dest interface{}) *CacheRepository_Set_Call {
	return &CacheRepository_Set_Call{Call: _e.mock.On("Set", ctx, req, dest)}
}

func (_c *CacheRepository_Set_Call) Run(run func(ctx context.Context, req structs.RequestSearchArticle, dest *structs.ResponseGetArticle)) *CacheRepository_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(structs.RequestSearchArticle), args[2].(*structs.ResponseGetArticle))
	})
	return _c
}

func (_c *CacheRepository_Set_Call) Return(_a0 error) *CacheRepository_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheRepository_Set_Call) RunAndReturn(run func(context.Context, structs.RequestSearchArticle, *structs.ResponseGetArticle) error) *CacheRepository_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewCacheRepository creates a new instance of CacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacheRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CacheRepository {
	mock := &CacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
